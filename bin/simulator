#!/usr/bin/env ruby

require 'bundler/setup'
require 'midi_visualizer'
require 'midi_visualizer/interface/simulator'

include MIDIVisualizer

PALETTE_BG = Layer::Palette.new(Color::RGB.new(0x40, 0xFF, 0x60),
                                Color::RGB.new(0x00, 0x00, 0xFF),
                                Color::RGB.new(0xFF, 0x00, 0x00))

PALETTE_FG = Layer::Palette.new(Color::RGB.new(0x00, 0x00, 0x00),
                                Color::RGB.new(0xFF, 0xFF, 0xFF))

viz = Visualizer.new Interface::Simulator.new(6, 8), PALETTE_BG, PALETTE_FG

# # Setup foreground
viz.foreground.each { |state| state.p = 1.0 }

class LFO
  def initialize(layer, f = 1.0, amplitude = 0.5, bias = 0.5)
    @func =
      lambda do |t, phase|
        amplitude * Math.cos(t * 2 * Math::PI * f + phase) + bias
      end
    @phases = Array.new(layer.num_states) { rand * 2 * Math::PI * 1.0 }
  end

  def next_state(t)
    @phases.map { |phase| @func.call(t, phase) }
  end
end

class Gauss
  def initialize(layer, f, std)
    mean_state = (rand * layer.num_states).round
    @layer = layer
    @weight_map =
      Array.new(layer.num_states) do |s|
        d = layer.distance(s, mean_state)
        Math.exp(-0.5 * (d / std)**2)
      end

    @osc_x = ->(t) { 0.5 + 0.2 * Math.cos(t * f * 2 * Math::PI) }
    @osc_y = ->(t) { 0.5 + 0.2 * Math.sin(t * f * 2 * Math::PI) }
    
    @active_notes = {}
    @adsr_effects = {}
  end
  
  def handle_midi_event(event)
    if event.on?
      @active_notes[event.note] = rand (0...@layer.num_states)
      puts "Note on: #{event.note} -> #{@active_notes[event.note]}"
      current_value =
        if @adsr_effects[@active_notes[event.note]]
          struct = @adsr_effects[@active_notes[event.note]]
          struct[:effect].value(event.timestamp, params: struct[:params])
        else
          0.0
        end
      
      @adsr_effects[@active_notes[event.note]] = {
        effect: Effect::ADSR.new(event.timestamp, current_value),
        params: Effect::ADSR::DEFAULT_PARAMS.merge({ attack_value: rand(0.5..1.0) })
      }
        
    else
      puts "Note off #{event.note} -> #{@active_notes[event.note]}"
      struct = @adsr_effects[@active_notes[event.note]]
      if struct
        struct[:effect].release!(event.timestamp, params: struct[:params])
        @active_notes.delete event.note
      else
        # TODO: Why does this sometimes happen?
        puts "Failed to remove #{event.note} from #{@active_notes[event.note]}"
      end
    end
  end

  def next_state(t)
    @adsr_effects.reject! { |_, struct| struct[:effect].done? }
    
    Array.new(@layer.num_states) do |i|
      x_i, y_i = @layer.position i
      # Sum the contributions from all active gaussians
      @adsr_effects.reduce(0.0) do |a, (k, struct)|
        x_k, y_k = @layer.position k
        dx = x_i - x_k
        dy = y_i - y_k
        a + struct[:effect].value(t, params: struct[:params]) * Math.exp(-0.5 * ((dx**2 + dy**2) / 0.01))
      end
    end
  end
end

gauss = Gauss.new viz.foreground, 0.2, 0.1
viz.router.subscribe gauss, MIDI::Event::Note

lfo_f = LFO.new viz.foreground, 0.1, 0.1, 0.9
viz.background.intensity = 0.2

midi_thread =
  Thread.new do
    active_notes = []
    loop do
      # wait a random time t
      t = rand * 1
      sleep t
      
      if rand > 0.9**active_notes.length
        # Delete a note
        note = active_notes[rand (0...active_notes.length)]
        active_notes.delete note
        
        viz.router.push({
          data: [0x80, note, 0],
          timestamp: Time.now.to_f
        })
      else
        note = rand (1..(60 - active_notes.length))
        note = (note + 1) % 61 while active_notes.include? note
        
        active_notes << note
        
        viz.router.push({
          data: [0x90, note, 60],
          timestamp: Time.now.to_f
        })
      end
    end
  end

viz.run do |t, _|
  foreground_intensity = gauss.next_state(t)
  foreground_palette = lfo_f.next_state(t)
    
  viz.num_states.times do |i|
    viz.foreground[i].i = foreground_intensity[i]
    viz.foreground[i].p = foreground_palette[i]
  end
end

midi_thread.kill
